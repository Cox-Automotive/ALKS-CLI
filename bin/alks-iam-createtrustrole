#!/usr/bin/env node
'use strict';

process.title = 'ALKS';

var program   = require('commander'),
    _         = require('underscore'),
    clc       = require('cli-color'),
    alks      = require('alks.js'),
    Iam       = require('../lib/iam'),
    utils     = require('../lib/utils'),
    Developer = require('../lib/developer'),
    config    = require('../package.json');

var logger       = 'iam-createtrustrole',
    roleNameDesc = 'alphanumeric including @+=._-',
    trustArnDesc = 'arn:aws|aws-us-gov:iam::d{12}:role/TestRole';

program
    .version(config.version)
    .description('creates a new IAM Trust role')
    .option('-n, --rolename [rolename]', 'the name of the role, ' + roleNameDesc)
    .option('-t, --roletype [roletype]', 'the role type: Cross Account or Inner Account')
    .option('-T, --trustarn [trustarn]', 'trust arn, ' + trustArnDesc)
    .option('-e, --enableAlksAccess', 'enable alks access (MI), default: false', false)
    .option('-a, --account [alksAccount]', 'alks account to use')
    .option('-r, --role [alksRole]', 'alks role to use')
    .option('-F, --favorites', 'filters favorite accounts')
    .option('-v, --verbose', 'be verbose')
    .parse(process.argv);

var ROLE_NAME_REGEX     = /^[a-zA-Z0-9!@+=._-]+$/g,
    TRUST_ARN_REGEX     = /arn:(aws|aws-us-gov):iam::\d{12}:role\/?[a-zA-Z_0-9+=,.@-_/]+/g,
    roleName            = program.rolename,
    roleType            = program.roletype,
    trustArn            = program.trustarn,
    enableAlksAccess    = program.enableAlksAccess,
    alksAccount         = program.account,
    alksRole            = program.role,
    filterFaves         = program.favorites || false;

utils.log(program, logger, 'validating role name: ' + roleName);
if(_.isEmpty(roleName) || !ROLE_NAME_REGEX.test(roleName)){
    utils.errorAndExit('The role name provided contains illegal characters. It must be ' + roleNameDesc);
}

utils.log(program, logger, 'validating role type: ' + roleType);
if(_.isEmpty(roleType) || (roleType !== "Cross Account" && roleType !== "Inner Account")){
    utils.errorAndExit('The role type is required');
}

utils.log(program, logger, 'validating trust arn: ' + trustArn);
if(_.isEmpty(trustArn) || !TRUST_ARN_REGEX.test(trustArn)){
    utils.errorAndExit('The trust arn provided contains illegal characters. It must be ' + trustArnDesc);
}

if(!_.isUndefined(alksAccount) && _.isUndefined(alksRole)){
    utils.log(program, logger, 'trying to extract role from account');
    alksRole = utils.tryToExtractRole(alksAccount);
}

Iam.getIAMKey(program, logger, alksAccount, alksRole, false, filterFaves, function(err, key, developer, auth){
    if(err){
        return utils.errorAndExit(err);
    }

    // create the role
    var data = _.extend({}, developer, key);
    utils.log(program, logger, 'calling api to create trust role: ' + roleName);
    delete data.userid;

    alks.getAccessToken({
        baseUrl: developer.server,
        refreshToken: auth.token
    }).then(tokenInfo => {

        let alksCreate = alks.create({
            baseUrl: developer.server,
            accessToken: tokenInfo.accessToken
        });

        alksCreate.createNonServiceRole({
            account: data.alksAccount,
            role: data.alksRole,
            trustArn: trustArn,
            roleName: roleName,
            roleType: roleType,
            enableAlksAccess: enableAlksAccess
        }).then(iamTrustRole => {

            console.log(clc.white(['The role: ', iamTrustRole.roleName, ' was created with the ARN: '].join('')) + clc.white.underline(iamTrustRole.roleArn));
            if(data.instanceProfileArn){
                console.log(clc.white(['An instance profile was also created with the ARN: '].join('')) + clc.white.underline(iamTrustRole.instanceProfileArn));
            }
            utils.log(program, logger, 'checking for updates');
            utils.checkForUpdate();
            Developer.trackActivity(logger);

        }).catch(error => {
            utils.log(program, logger, 'error creating iam trust role: ' + error);
            return utils.errorAndExit(error);
        });
    }).catch(error => {
        utils.log(program, logger, 'error exchanging for access token: ' + error);
        return utils.errorAndExit(error);
    });
});
