#!/usr/bin/env node
'use strict';

process.title = 'ALKS';

var program   = require('commander'),
    clc       = require('cli-color'),
    _         = require('underscore'),
    Table     = require('cli-table2'),
    moment    = require('moment'),
    async     = require('async'),
    config    = require('../package.json'),
    utils     = require('../lib/utils'),
    Developer = require('../lib/developer'),
    keys      = require('../lib/keys');

program
    .version(config.version)
    .description('list active sessions')
    .option('-p, --password [password]', 'my password')
    .option('-v, --verbose', 'be verbose')
    .parse(process.argv);

var logger = 'sessions-list';

async.waterfall([
    // check to be sure were configured
    function(callback){
        Developer.ensureConfigured(callback);
    },
    // get the password
    function(callback){
        utils.log(program, logger, 'getting password');
        Developer.getPassword(program, callback);
    },
    // now retrieve the keys
    function(password, callback){
        utils.log(program, logger, 'getting existing sesions');
        keys.getKeys(password, false, function(err, nonIamkeys){
            callback(err, password, nonIamkeys)
        });
    },
    // now retrieve the iam keys
    function(password, nonIamkeys, callback){
        utils.log(program, logger, 'getting existing iam sesions');
        keys.getKeys(password, true, function(err, iamKeys){
            callback(err, nonIamkeys.concat(iamKeys));
        });
    },
    // it's dangerous to go alone, choose a key...
    function(foundKeys, callback){
        var table = new Table({
            head: [
                clc.white.bold('Access Key'),
                clc.white.bold('Secret Key'),
                clc.white.bold('Type'),
                clc.white.bold('Expires'),
                clc.white.bold('Created')
            ],
            colWidths: [25, 25, 10, 25, 25]
        });


        var groupedKeys = _.groupBy(foundKeys, 'alksAccount');

        _.each(groupedKeys, function(keys, alksAccount){
            table.push([ { colSpan: 4, content: clc.yellow.bold('ALKS Account: ' + alksAccount) } ]);

            _.each(keys, function(keydata){
                table.push([ utils.obfuscate(keydata.accessKey),
                             utils.obfuscate(keydata.secretKey),
                             keydata.isIAM ? 'IAM' : 'Standard',
                             moment(keydata.expires).calendar(),
                             moment(keydata.meta.created).fromNow()
                           ]);
            });
        });

        if(!foundKeys.length){
            table.push([ { colSpan: 5, content: clc.yellow.bold('No active sessions found.') } ]);
        }

        console.error(clc.white.underline.bold('\Active Sessions'));
        console.error(clc.white(table.toString()));
        callback(null);
    }
], function(err, selectedKey){
    utils.log(program, logger, 'checking for updates');
    utils.checkForUpdate();
    Developer.trackActivity(logger);
});