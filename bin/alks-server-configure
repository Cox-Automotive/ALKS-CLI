#!/usr/bin/env node
'use strict';

process.title = 'ALKS';

var program    = require('commander'),
    clc        = require('cli-color'),
    _          = require('underscore'),
    config     = require('../package.json'),
    utils      = require('../lib/utils'),
    Developer  = require('../lib/developer'),
    Sessions   = require('../lib/sessions'),
    Iam        = require('../lib/iam');

program
    .version(config.version)
    .description('configures the alks metadata server')
    .option('-a, --account [alksAccount]', 'alks account to use')
    .option('-r, --role [alksRole]', 'alks role to use')
    .option('-i, --iam', 'create an IAM session')
    .option('-p, --password [password]', 'my password')
    .option('-F, --favorites', 'filters favorite accounts')
    .option('-v, --verbose', 'be verbose')
    .parse(process.argv);

var alksAccount       = program.account,
    alksRole          = program.role,
    forceNewSession   = program.newSession,
    filterFaves       = program.favorites || false,
    logger            = 'server-configure';

if(!_.isUndefined(alksAccount) && _.isUndefined(alksRole)){
    utils.log(program, logger, 'trying to extract role from account');
    alksRole = utils.tryToExtractRole(alksAccount);
}

var onComplete = function(err, key){
    if(err){
        return utils.errorAndExit(err);
    }

    setTimeout(function(){
        Developer.saveMetadata({alksAccount: key.alksAccount, alksRole: key.alksRole, isIAM: key.isIAM}, function(err, resp){
            if(err){
                return utils.errorAndExit('Unable to save metadata!', err);
            }

            console.error(clc.white('Metadata has been saved!'));

            utils.log(program, logger, 'checking for updates');
            utils.checkForUpdate();
            Developer.trackActivity(logger);
        });
    }, 1000);
};

if(_.isUndefined(program.iam)){
    Sessions.getSessionKey(program, logger, alksAccount, alksRole, false, forceNewSession, filterFaves, onComplete);
}
else{
    Iam.getIAMKey(program, logger, alksAccount, alksRole, forceNewSession, filterFaves, onComplete);
}