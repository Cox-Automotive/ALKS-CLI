#!/usr/bin/env node
'use strict';

process.title = 'ALKS';

var program   = require('commander'),
    _         = require('underscore'),
    clc       = require('cli-color'),
    alks      = require('alks-node'),
    Iam       = require('../lib/iam'),
    utils     = require('../lib/utils'),
    Developer = require('../lib/developer'),
    config    = require('../package.json');

var logger       = 'iam-createrole',
    roleNameDesc = 'alphanumeric including @+=._-';

program
    .version(config.version)
    .description('creates a new IAM role')
    .option('-n, --rolename [rolename]', 'the name of the role, ' + roleNameDesc)
    .option('-t, --roletype [roletype]', 'the role type, to see available roles: alks iam roletypes')
    .option('-d, --defaultPolicies', 'include default policies, default: false', false)
    .option('-a, --account [alksAccount]', 'alks account to use')
    .option('-r, --role [alksRole]', 'alks role to use')
    .option('-F, --favorites', 'filters favorite accounts')
    .option('-v, --verbose', 'be verbose')
    .parse(process.argv);

var ROLE_NAME_REGEX = /^[a-zA-Z0-9!@+=._-]+$/g,
    roleName        = program.rolename,
    roleType        = program.roletype,
    incDefPolicies  = program.defaultPolicies,
    alksAccount     = program.account,
    alksRole        = program.role,
    filterFaves     = program.favorites || false;

utils.log(program, logger, 'validating role name: ' + roleName);
if(_.isEmpty(roleName) || !ROLE_NAME_REGEX.test(roleName)){
    utils.errorAndExit('The role name provided contains illegal characters. It must be ' + roleNameDesc);
}

utils.log(program, logger, 'validating role type: ' + roleType);
if(_.isEmpty(roleType)){
    utils.errorAndExit('The role type is required');
}

if(!_.isUndefined(alksAccount) && _.isUndefined(alksRole)){
    utils.log(program, logger, 'trying to extract role from account');
    alksRole = utils.tryToExtractRole(alksAccount);
}

Iam.getIAMKey(program, logger, alksAccount, alksRole, false, filterFaves, function(err, key, developer, auth){
    if(err){
        return utils.errorAndExit(err);
    }

    // create the role
    var data = _.extend({}, developer, key);
    utils.log(program, logger, 'calling api to create role: ' + roleName);

    alks.createIamRole(data, auth, roleName, roleType, incDefPolicies, { debug: program.verbose, ua: utils.getUA() }, function(err, data){
        if(err){
            return utils.errorAndExit(err);
        }

        console.error(clc.white(['The role: ', data.roleName, ' was created with the ARN: '].join('')) + clc.white.underline(data.roleArn));
        if(data.instanceProfileArn){
            console.error(clc.white(['An instance profile was also created with the ARN: '].join('')) + clc.white.underline(data.instanceProfileArn));
        }
        utils.log(program, logger, 'checking for updates');
        utils.checkForUpdate();
        Developer.trackActivity(logger);
    });
});