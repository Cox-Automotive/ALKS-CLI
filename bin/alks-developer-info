#!/usr/bin/env node
'use strict';

process.title = 'ALKS';

var program   = require('commander'),
    clc       = require('cli-color'),
    _         = require('underscore'),
    async     = require('async'),
    Table     = require('cli-table3'),
    config    = require('../package.json'),
    Developer = require('../lib/developer'),
    utils     = require('../lib/utils');

program
    .version(config.version)
    .description('shows current developer configuration')
    .option('-v, --verbose', 'be verbose')
    .parse(process.argv);

var table = new Table({
    head: [clc.white.bold('Key'), clc.white.bold('Value')],
    colWidths: [25, 50]
});

var logger = 'dev-info';

async.series({
    // get developer
    developer: function(callback){
        utils.log(program, logger, 'getting developer');
        Developer.getDeveloper(callback);
    },
    password: function(callback){
        utils.log(program, logger, 'getting password');
        Developer.getPassword(null, callback); // null means dont prompt
    },
    token: function(callback){
        utils.log(program, logger, 'getting 2fa token');
        Developer.getToken(function(token){ callback(null, token); });
    }
},
function(err, results){
    var ignores = [ 'lastVersion', 'lastAcctUsed' ],
        mapping = {
        'server': 'ALKS Server',
        'userid': 'Network Login',
        'alksAccount': 'Default ALKS Account',
        'alksRole': 'Default ALKS Role',
        'outputFormat': 'Default Output Format'
    };

    _.each(results.developer, function(val, key){
        if(!_.contains(ignores, key)){
            table.push([mapping[key], _.isEmpty(val) ? '' : val]);
        }
    });

    var password = !_.isEmpty(results.password) ? '**********' : clc.red('NOT SET');
    table.push(['Password', password]);
console.log(JSON.stringify(results, null, 4));
    var token = !_.isEmpty(results.token) ? results.token.substring(0,4) + '**********' : clc.red('NOT SET');
    table.push(['2FA Token', token]);

    console.error(clc.white.underline.bold('\nDeveloper Configuration'));
    console.error(clc.white(table.toString()));

    utils.log(program, logger, 'checking for update');
    utils.checkForUpdate();
    Developer.trackActivity(logger);
});