#!/usr/bin/env node
'use strict';

process.title = 'ALKS';

let program    = require('commander'),
    _          = require('underscore'),
    config     = require('../package.json'),
    utils      = require('../lib/utils'),
    Keys       = require('../lib/keys'),
    Developer  = require('../lib/developer'),
    Sessions   = require('../lib/sessions'),
    Iam        = require('../lib/iam');

let outputValues = utils.getOutputValues();

program
    .version(config.version)
    .description('creates or resumes a session')
    .option('-a, --account [alksAccount]', 'alks account to use')
    .option('-r, --role [alksRole]', 'alks role to use')
    .option('-i, --iam', 'create an IAM session')
    .option('-p, --password [password]', 'my password')
    .option('-o, --output [format]', 'output format (' + outputValues.join(', ') + ')')
    .option('-n, --namedProfile [profile]', 'if output is set to creds, use this profile, default: default')
    .option('-f, --force', 'if output is set to creds, force overwriting of AWS credentials')
    .option('-F, --favorites', 'filters favorite accounts')
    .option('-N, --newSession', 'forces a new session to be generated')
    .option('-d, --default', 'uses your default account from "alks developer configure"')
    .option('-v, --verbose', 'be verbose')
    .parse(process.argv);

let alksAccount       = program.account,
    alksRole          = program.role,
    forceNewSession   = program.newSession,
    useDefaultAcct    = program.default,
    output            = program.output,
    filterFaves       = program.favorites || false,
    logger            = 'sessions-open';

if(!_.isUndefined(alksAccount) && _.isUndefined(alksRole)){
    utils.log(program, logger, 'trying to extract role from account');
    alksRole = utils.tryToExtractRole(alksAccount);
}

let execute = function(){
    if(_.isUndefined(program.iam)){
        Sessions.getSessionKey(program, logger, alksAccount, alksRole, false, forceNewSession, filterFaves, onComplete);
    }
    else{
        Iam.getIAMKey(program, logger, alksAccount, alksRole, forceNewSession, filterFaves, onComplete);
    }
};

let onComplete = function(err, key, developer){
    if(err){
        return utils.errorAndExit(err);
    }

    console.log(Keys.getKeyOutput(output || developer.outputFormat, key, program.namedProfile, program.force));

    utils.log(program, logger, 'checking for updates');
    utils.checkForUpdate();
    Developer.trackActivity(logger);
};

if(useDefaultAcct){
    Developer.getDeveloper(function(err, dev){
        if(err) return utils.errorAndExit('Unable to load default account!', err);

        alksAccount = dev.alksAccount;
        alksRole = dev.alksRole;
        execute();
    });
}
else{
    execute();
}
