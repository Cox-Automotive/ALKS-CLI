#!/usr/bin/env node
'use strict';

process.title = 'ALKS';

var program   = require('commander'),
    clc       = require('cli-color'),
    inquirer  = require('inquirer'),
    async     = require('async'),
    _         = require('underscore'),
    alks      = require('alks-node'),
    config    = require('../package.json'),
    utils     = require('../lib/utils'),
    Developer = require('../lib/developer');

program
    .version(config.version)
    .description('configures developer')
    .option('-v, --verbose', 'be verbose')
    .parse(process.argv);

var logger = 'dev-config';

function getPrompt(field, data, text, validator, callback){
    inquirer.prompt([{
        type: 'input',
        name: field,
        message: text,
        default: function(){
            return data[field];
        },
        validate: validator ? validator : function(val){
            return (!_.isEmpty(val)) ? true : 'Please enter a value for ' + text + '.';
        }
    }]).then(function(answers){
        callback(null, answers[field]);
    });
}

async.waterfall([
    // check for an exisiting developer
    function(callback){
        utils.log(program, logger, 'getting developer');
        Developer.getDeveloper(callback);
    },
    // ask for server
    function(previousData, callback){
        getPrompt('server', previousData, 'ALKS server', utils.isURL, function(err, server){
            callback(err, previousData, server);
        });
    },
    // ask for username
    function(previousData, server, callback){
        getPrompt('userid', previousData, 'Network Username', null, function(err, userid){
            callback(err, previousData, server, userid);
        });
    },
    // check for existing password
    function(previousData, server, userid, callback){
        Developer.getPasswordFromKeystore(function(pass){
            callback(null, previousData, server, userid, pass)
        });
    },
    // ask for password
    function(previousData, server, userid, currentPassword, callback){
        Developer.getPasswordFromPrompt(function(err, password){
            callback(err, previousData, server, userid, password);
        }, 'Network Password', currentPassword);
    },
    // ask if they want to save password
    function(previousData, server, userid, password, callback){
        inquirer.prompt([
            {
                type: 'confirm',
                name: 'savePassword',
                message: 'Save password',
            }
        ]).then(function(answers){
            callback(null, previousData, server, userid, password, answers.savePassword);
        });
    },
    // request list of accounts from ALKS
    function(previousData, server, userid, password, savePassword, callback){
        utils.log(program, logger, 'Getting ALKS accounts');
        var prompt = 'Please select your default ALKS account/role';

        program.password = password; // this ensures getALKSAccount() doesnt prompt..
        var opts = {
            prompt: prompt,
            dontDefault: true,
            server: server,
            userid: userid
        }
        Developer.getALKSAccount(program, opts, function(err, data){
            if(err){
                if(err.message.indexOf('No accounts') === -1){
                    return callback(err);
                }
            }

            callback(null, server, userid, password, savePassword, data? data.alksAccount : '', data? data.alksRole : '');
        });
    }
], function(err, server, userid, password, savePassword, alksAccount, alksRole){
    // did any of our steps have issues?
    if(err){
        return utils.errorAndExit('Error configuring developer: ' + err.message);
    }

    var developerPayload = {
        server: server,
        userid: userid,
        password: password,
        savePassword: savePassword,
        alksAccount: alksAccount,
        alksRole: alksRole
    };

    // create developer
    utils.log(program, logger, 'saving developer');
    Developer.saveDeveloper(developerPayload, function(err){
        if(err){
            utils.log(program, logger, 'error saving! ' + err.message);
            console.error(clc.red.bold('There was an error updating your developer configuration.'));
        }
        else{
            console.error(clc.white('Your developer configuration has been updated.'));
        }

        utils.log(program, logger, 'checking for update');
        utils.checkForUpdate();
        Developer.trackActivity(logger);
    });
});