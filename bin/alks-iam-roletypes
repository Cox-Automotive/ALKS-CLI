#!/usr/bin/env node
'use strict';

process.title = 'ALKS';

var program   = require('commander'),
    clc       = require('cli-color'),
    _         = require('underscore'),
    async     = require('async'),
    alks2      = require('alks.js'),
    config    = require('../package.json'),
    Developer = require('../lib/developer'),
    utils     = require('../lib/utils');

var logger     = 'iam-roletypes',
    outputVals = [ 'list', 'json' ];

program
    .version(config.version)
    .description('list the available iam role types')
    .option('-o, --output [format]', 'output format (' + outputVals.join(', ') + '), default: ' + outputVals[0], outputVals[0])
    .option('-v, --verbose', 'be verbose')
    .parse(process.argv);

var output = program.output;

if(!_.contains(outputVals, output)){
    utils.errorAndExit('The output provided ('+output+') is not in the allowed values: ' + outputVals.join(', '));
}

async.waterfall([
    // get developer
    function(cb){
        utils.log(program, logger, 'getting developer');
        Developer.getDeveloper(cb);
    },
    // get auth
    function(developer, callback){
        utils.log(program, logger, 'getting auth');
        Developer.getAuth(program, function(err, auth){
            callback(err, developer, auth);
        });
    },
    // load available account/roles
    function(developer, auth, cb){
        utils.log(program, logger, 'getting list of role types from REST API');

        alks2.getAccessToken({
            baseUrl: developer.server,
            refreshToken: auth.token
        }).then(tokenInfo => {
            utils.log(program, logger, 'exchanging for access token');

            let alksCreate = alks2.create({
                baseUrl: developer.server,
                accessToken: tokenInfo.accessToken
            });

            alksCreate.getAWSRoleTypes().then((iamRoleTypes) => {
                cb(null, iamRoleTypes);
            }).catch(error => {
                utils.log(program, logger, 'error creating ltk: ' + error);
                cb(error, null);
                return utils.errorAndExit(error);
            });

        }).catch(error => {
            utils.log(program, logger, 'error exchanging for access token: ' + error);
            return utils.errorAndExit(error);
        });
    }
], function(err, roleTypes){
    if(err){
        return utils.errorAndExit(err);
    }

    utils.log(program, logger, 'outputting list of ' + (roleTypes ? roleTypes.length : -1) + ' role types');
    console.error(clc.white.underline.bold('\nAvailable IAM Role Types'));

    if(output === 'list'){
        _.each(roleTypes, function(roleType, i){
            console.log(clc.white([ (i < 9 ? ' ' : ''), i+1, ') ', roleType ].join('')));
        });
    }
    else{
        console.log(JSON.stringify(roleTypes));
    }

    utils.log(program, logger, 'checking for updates');
    utils.checkForUpdate();
    Developer.trackActivity(logger);
});
